#!/usr/bin/env python3
"""
üóÑÔ∏è Medical Knowledge Base - Base de Conocimiento M√©dica Completa
Sistema de conocimiento m√©dico integral para MedeX

Incluye:
- ICD-10 completo
- Protocolos cl√≠nicos
- Gu√≠as de pr√°ctica cl√≠nica
- Medicamentos y dosis
- Procedimientos diagn√≥sticos
- Signos vitales normales
- Valores de laboratorio
"""

from dataclasses import dataclass, asdict
from typing import Dict, List, Any, Optional
import json
from datetime import datetime

@dataclass
class MedicalCondition:
    """Condici√≥n m√©dica completa"""
    icd10_code: str
    name: str
    category: str
    description: str
    symptoms: List[str]
    risk_factors: List[str]
    complications: List[str]
    diagnostic_criteria: List[str]
    differential_diagnosis: List[str]
    treatment_protocol: List[str]
    emergency_signs: List[str]
    prognosis: str
    follow_up: List[str]

@dataclass
class Medication:
    """Medicamento completo"""
    name: str
    generic_name: str
    category: str
    indications: List[str]
    contraindications: List[str]
    dosage_adult: str
    dosage_pediatric: str
    side_effects: List[str]
    interactions: List[str]
    monitoring: List[str]
    pregnancy_category: str

@dataclass
class DiagnosticProcedure:
    """Procedimiento diagn√≥stico"""
    name: str
    category: str
    indications: List[str]
    contraindications: List[str]
    preparation: List[str]
    procedure_steps: List[str]
    interpretation: List[str]
    complications: List[str]
    cost_range: str

@dataclass
class ClinicalProtocol:
    """Protocolo cl√≠nico"""
    name: str
    category: str
    indication: str
    steps: List[str]
    decision_points: List[str]
    emergency_modifications: List[str]
    evidence_level: str
    last_updated: str

class MedicalKnowledgeBase:
    """Base de conocimiento m√©dica completa"""
    
    def __init__(self):
        self.conditions = {}
        self.medications = {}
        self.procedures = {}
        self.protocols = {}
        self.vital_signs_normal = {}
        self.lab_values_normal = {}
        
        # Inicializar base de conocimiento
        self._initialize_knowledge_base()
    
    def _initialize_knowledge_base(self):
        """Inicializa la base de conocimiento m√©dica"""
        
        # Condiciones cardiovasculares
        self._add_cardiovascular_conditions()
        
        # Condiciones endocrinol√≥gicas
        self._add_endocrine_conditions()
        
        # Condiciones respiratorias
        self._add_respiratory_conditions()
        
        # Condiciones neurol√≥gicas
        self._add_neurological_conditions()
        
        # Medicamentos esenciales
        self._add_essential_medications()
        
        # Procedimientos diagn√≥sticos
        self._add_diagnostic_procedures()
        
        # Protocolos cl√≠nicos
        self._add_clinical_protocols()
        
        # Valores normales
        self._add_normal_values()
    
    def _add_cardiovascular_conditions(self):
        """Condiciones cardiovasculares"""
        
        # S√≠ndrome Coronario Agudo
        self.conditions["I21"] = MedicalCondition(
            icd10_code="I21",
            name="S√≠ndrome Coronario Agudo",
            category="Cardiovascular",
            description="Espectro de condiciones causadas por isquemia mioc√°rdica aguda",
            symptoms=[
                "Dolor tor√°cico opresivo",
                "Dolor irradiado a brazo izquierdo, mand√≠bula o espalda",
                "Disnea",
                "Diaforesis",
                "N√°useas y v√≥mitos",
                "Sensaci√≥n de muerte inminente"
            ],
            risk_factors=[
                "Diabetes mellitus",
                "Hipertensi√≥n arterial",
                "Tabaquismo",
                "Dislipidemia",
                "Historia familiar de cardiopat√≠a isqu√©mica",
                "Edad avanzada",
                "Sedentarismo",
                "Obesidad"
            ],
            complications=[
                "Shock cardiog√©nico",
                "Arritmias ventriculares",
                "Insuficiencia card√≠aca aguda",
                "Ruptura card√≠aca",
                "Pericarditis",
                "Tromboembolismo"
            ],
            diagnostic_criteria=[
                "Elevaci√≥n de troponinas card√≠acas",
                "Cambios electrocardiogr√°ficos compatibles",
                "S√≠ntomas cl√≠nicos compatibles",
                "Evidencia imagenol√≥gica de nueva p√©rdida de viabilidad mioc√°rdica"
            ],
            differential_diagnosis=[
                "Pericarditis aguda",
                "Disecci√≥n a√≥rtica",
                "Embolia pulmonar",
                "Neumon√≠a",
                "Reflujo gastroesof√°gico",
                "Dolor musculoesquel√©tico"
            ],
            treatment_protocol=[
                "ABCDE - V√≠a a√©rea, respiraci√≥n, circulaci√≥n",
                "Ox√≠geno si saturaci√≥n <90%",
                "Aspirina 325mg masticada",
                "Clopidogrel 600mg o Ticagrelor 180mg",
                "Atorvastatina 80mg",
                "Metoprolol 25mg cada 12h si no contraindicado",
                "Heparina seg√∫n peso",
                "Cateterismo urgente si STEMI"
            ],
            emergency_signs=[
                "Dolor tor√°cico > 20 minutos",
                "Elevaci√≥n del ST en ECG",
                "Hipotensi√≥n arterial",
                "Arritmias ventriculares",
                "Signos de shock"
            ],
            prognosis="Variable seg√∫n extensi√≥n del infarto y tiempo de reperfusi√≥n",
            follow_up=[
                "Ecocardiograma a las 48-72 horas",
                "Control con cardiolog√≠a en 1-2 semanas",
                "Rehabilitaci√≥n card√≠aca",
                "Modificaci√≥n de factores de riesgo"
            ]
        )
        
        # Hipertensi√≥n Arterial
        self.conditions["I10"] = MedicalCondition(
            icd10_code="I10",
            name="Hipertensi√≥n Arterial Esencial",
            category="Cardiovascular",
            description="Elevaci√≥n sostenida de la presi√≥n arterial ‚â•140/90 mmHg",
            symptoms=[
                "Usualmente asintom√°tica",
                "Cefalea occipital matutina",
                "Mareos",
                "Visi√≥n borrosa",
                "Disnea de esfuerzo",
                "Epistaxis"
            ],
            risk_factors=[
                "Edad avanzada",
                "Antecedentes familiares",
                "Obesidad",
                "Consumo excesivo de sal",
                "Sedentarismo",
                "Tabaquismo",
                "Diabetes",
                "Estr√©s cr√≥nico"
            ],
            complications=[
                "Enfermedad cardiovascular",
                "Accidente cerebrovascular",
                "Insuficiencia renal",
                "Retinopat√≠a hipertensiva",
                "Insuficiencia card√≠aca"
            ],
            diagnostic_criteria=[
                "PA ‚â•140/90 mmHg en al menos 2 ocasiones",
                "Promedio de PA ambulatoria diurna ‚â•135/85 mmHg",
                "Promedio de PA domiciliaria ‚â•135/85 mmHg"
            ],
            differential_diagnosis=[
                "Hipertensi√≥n secundaria",
                "S√≠ndrome de bata blanca",
                "Hipertensi√≥n enmascarada",
                "Crisis hipertensiva"
            ],
            treatment_protocol=[
                "Modificaciones del estilo de vida",
                "IECA o ARA II como primera l√≠nea",
                "Diur√©ticos tiaz√≠dicos",
                "Bloqueadores de canales de calcio",
                "Meta <140/90 mmHg (o <130/80 en diab√©ticos)"
            ],
            emergency_signs=[
                "PA >180/120 mmHg con s√≠ntomas",
                "Dolor tor√°cico",
                "D√©ficit neurol√≥gico",
                "Disnea severa",
                "Alteraci√≥n del estado mental"
            ],
            prognosis="Excelente con tratamiento adecuado",
            follow_up=[
                "Control mensual hasta meta terap√©utica",
                "Control cada 3-6 meses estable",
                "Monitoreo de √≥rgano blanco anual"
            ]
        )
    
    def _add_endocrine_conditions(self):
        """Condiciones endocrinol√≥gicas"""
        
        # Diabetes Mellitus Tipo 2
        self.conditions["E11"] = MedicalCondition(
            icd10_code="E11",
            name="Diabetes Mellitus Tipo 2",
            category="Endocrinolog√≠a",
            description="Trastorno metab√≥lico caracterizado por hiperglucemia cr√≥nica",
            symptoms=[
                "Poliuria",
                "Polidipsia",
                "Polifagia",
                "P√©rdida de peso inexplicable",
                "Fatiga",
                "Visi√≥n borrosa",
                "Heridas que sanan lentamente",
                "Infecciones recurrentes"
            ],
            risk_factors=[
                "Obesidad",
                "Edad >45 a√±os",
                "Antecedentes familiares",
                "Sedentarismo",
                "Hipertensi√≥n",
                "Dislipidemia",
                "S√≠ndrome de ovarios poliqu√≠sticos",
                "Diabetes gestacional previa"
            ],
            complications=[
                "Retinopat√≠a diab√©tica",
                "Nefropat√≠a diab√©tica",
                "Neuropat√≠a diab√©tica",
                "Enfermedad cardiovascular",
                "Pie diab√©tico",
                "Cetoacidosis diab√©tica",
                "S√≠ndrome hiperosmolar"
            ],
            diagnostic_criteria=[
                "Glucosa en ayunas ‚â•126 mg/dL",
                "Glucosa a las 2 horas ‚â•200 mg/dL en PTGO",
                "HbA1c ‚â•6.5%",
                "Glucosa aleatoria ‚â•200 mg/dL con s√≠ntomas"
            ],
            differential_diagnosis=[
                "Diabetes tipo 1",
                "Diabetes MODY",
                "Diabetes secundaria",
                "Intolerancia a la glucosa"
            ],
            treatment_protocol=[
                "Modificaciones del estilo de vida",
                "Metformina como primera l√≠nea",
                "Meta HbA1c <7% (individualizada)",
                "Control de presi√≥n arterial <140/90 mmHg",
                "Control de l√≠pidos (LDL <100 mg/dL)"
            ],
            emergency_signs=[
                "Glucosa >400 mg/dL",
                "Cetonas en orina",
                "Alteraci√≥n del estado mental",
                "Deshidrataci√≥n severa",
                "Signos de shock"
            ],
            prognosis="Buena con control gluc√©mico adecuado",
            follow_up=[
                "HbA1c cada 3 meses",
                "Examen oftalmol√≥gico anual",
                "Microalbuminuria anual",
                "Examen de pies cada visita"
            ]
        )
    
    def _add_respiratory_conditions(self):
        """Condiciones respiratorias"""
        
        # Neumon√≠a Adquirida en la Comunidad
        self.conditions["J18"] = MedicalCondition(
            icd10_code="J18",
            name="Neumon√≠a Adquirida en la Comunidad",
            category="Respiratorio",
            description="Infecci√≥n aguda del par√©nquima pulmonar",
            symptoms=[
                "Fiebre y escalofr√≠os",
                "Tos productiva",
                "Disnea",
                "Dolor tor√°cico pleur√≠tico",
                "Fatiga",
                "Confusi√≥n (ancianos)",
                "Cefalea",
                "Mialgias"
            ],
            risk_factors=[
                "Edad >65 a√±os",
                "Tabaquismo",
                "Alcoholismo",
                "EPOC",
                "Diabetes",
                "Insuficiencia card√≠aca",
                "Inmunosupresi√≥n",
                "Aspiraci√≥n"
            ],
            complications=[
                "Insuficiencia respiratoria",
                "Sepsis",
                "Derrame pleural",
                "Absceso pulmonar",
                "Meningitis",
                "Endocarditis"
            ],
            diagnostic_criteria=[
                "Infiltrado pulmonar en radiograf√≠a",
                "S√≠ntomas respiratorios agudos",
                "Signos vitales anormales",
                "Leucocitosis o leucopenia"
            ],
            differential_diagnosis=[
                "Bronquitis aguda",
                "Embolia pulmonar",
                "Insuficiencia card√≠aca",
                "C√°ncer pulmonar",
                "Tuberculosis"
            ],
            treatment_protocol=[
                "Evaluaci√≥n con CURB-65",
                "Ambulatorio: Amoxicilina 1g cada 8h x 7 d√≠as",
                "Hospitalizado: Ceftriaxona + Azitromicina",
                "UCI: Ceftriaxona + Azitromicina + Vancomicina",
                "Ox√≠geno si saturaci√≥n <90%"
            ],
            emergency_signs=[
                "Saturaci√≥n O2 <90%",
                "Frecuencia respiratoria >30",
                "Presi√≥n arterial <90/60 mmHg",
                "Confusi√≥n",
                "BUN >20 mg/dL"
            ],
            prognosis="Buena en pacientes j√≥venes y sanos",
            follow_up=[
                "Radiograf√≠a de control en 6-8 semanas",
                "Mejor√≠a cl√≠nica en 48-72 horas",
                "Vacunaci√≥n anti-neumoc√≥cica"
            ]
        )
    
    def _add_neurological_conditions(self):
        """Condiciones neurol√≥gicas"""
        
        # Accidente Cerebrovascular Isqu√©mico
        self.conditions["I63"] = MedicalCondition(
            icd10_code="I63",
            name="Accidente Cerebrovascular Isqu√©mico",
            category="Neurolog√≠a",
            description="Oclusi√≥n de un vaso cerebral con consecuente isquemia",
            symptoms=[
                "Hemiparesia o hemiplej√≠a s√∫bita",
                "Alteraci√≥n del habla (afasia, disartria)",
                "Alteraci√≥n de la visi√≥n",
                "Alteraci√≥n del estado mental",
                "Cefalea s√∫bita severa",
                "V√©rtigo, ataxia",
                "P√©rdida de sensibilidad"
            ],
            risk_factors=[
                "Hipertensi√≥n arterial",
                "Diabetes mellitus",
                "Fibrilaci√≥n auricular",
                "Tabaquismo",
                "Dislipidemia",
                "Edad avanzada",
                "Antecedentes de ACV",
                "Estenosis carot√≠dea"
            ],
            complications=[
                "Edema cerebral",
                "Transformaci√≥n hemorr√°gica",
                "Convulsiones",
                "Neumon√≠a aspirativa",
                "Trombosis venosa profunda",
                "Depresi√≥n post-ACV"
            ],
            diagnostic_criteria=[
                "D√©ficit neurol√≥gico focal agudo",
                "TC cerebral sin hemorragia",
                "Inicio s√∫bito de s√≠ntomas",
                "Duraci√≥n >24 horas o muerte"
            ],
            differential_diagnosis=[
                "ACV hemorr√°gico",
                "AIT",
                "Migra√±a con aura",
                "Convulsiones",
                "Hipoglucemia",
                "Intoxicaci√≥n"
            ],
            treatment_protocol=[
                "Activaci√≥n c√≥digo ictus",
                "TC cerebral urgente",
                "rtPA si <4.5 horas desde inicio",
                "Trombectom√≠a mec√°nica si <6 horas",
                "Aspirina 325mg si no rtPA",
                "Control de presi√≥n arterial"
            ],
            emergency_signs=[
                "D√©ficit neurol√≥gico s√∫bito",
                "Alteraci√≥n del nivel de conciencia",
                "Signos de herniaci√≥n",
                "Convulsiones",
                "Fiebre >38¬∞C"
            ],
            prognosis="Variable seg√∫n extensi√≥n y localizaci√≥n",
            follow_up=[
                "Rehabilitaci√≥n multidisciplinaria",
                "Control de factores de riesgo",
                "Antiagregaci√≥n plaquetaria",
                "Evaluaci√≥n neurol√≥gica seriada"
            ]
        )
    
    def _add_essential_medications(self):
        """Medicamentos esenciales"""
        
        # Aspirina
        self.medications["aspirina"] = Medication(
            name="Aspirina",
            generic_name="√Åcido acetilsalic√≠lico",
            category="Antiagregante plaquetario",
            indications=[
                "Prevenci√≥n cardiovascular primaria y secundaria",
                "S√≠ndrome coronario agudo",
                "Accidente cerebrovascular isqu√©mico",
                "Fiebre y dolor (dosis analg√©sicas)"
            ],
            contraindications=[
                "Alergia a salicilatos",
                "√ölcera p√©ptica activa",
                "Sangrado gastrointestinal",
                "Trastornos de coagulaci√≥n",
                "Insuficiencia hep√°tica severa"
            ],
            dosage_adult="75-100mg diarios para prevenci√≥n; 325mg para SCA",
            dosage_pediatric="No usar en <16 a√±os (riesgo de s√≠ndrome de Reye)",
            side_effects=[
                "Sangrado gastrointestinal",
                "√ölceras p√©pticas",
                "Tinnitus",
                "Reacciones al√©rgicas",
                "S√≠ndrome de Reye (ni√±os)"
            ],
            interactions=[
                "Warfarina (aumenta riesgo de sangrado)",
                "Metotrexato (toxicidad)",
                "IECA (reduce efecto)",
                "Corticosteroides (√∫lceras)"
            ],
            monitoring=[
                "Signos de sangrado",
                "Funci√≥n renal",
                "Hemoglobina/hematocrito",
                "S√≠ntomas gastrointestinales"
            ],
            pregnancy_category="C (D en tercer trimestre)"
        )
        
        # Metformina
        self.medications["metformina"] = Medication(
            name="Metformina",
            generic_name="Metformina clorhidrato",
            category="Antidiab√©tico oral",
            indications=[
                "Diabetes mellitus tipo 2",
                "S√≠ndrome de ovarios poliqu√≠sticos",
                "Prevenci√≥n de diabetes en prediabetes"
            ],
            contraindications=[
                "Insuficiencia renal (TFG <30 mL/min)",
                "Acidosis metab√≥lica",
                "Insuficiencia card√≠aca descompensada",
                "Hipoxia tisular",
                "Alcoholismo"
            ],
            dosage_adult="500mg dos veces al d√≠a, m√°ximo 2550mg/d√≠a",
            dosage_pediatric="500mg dos veces al d√≠a en >10 a√±os",
            side_effects=[
                "N√°useas y v√≥mitos",
                "Diarrea",
                "Dolor abdominal",
                "Sabor met√°lico",
                "Acidosis l√°ctica (raro)"
            ],
            interactions=[
                "Contrastes yodados (suspender 48h)",
                "Alcohol (acidosis l√°ctica)",
                "Diur√©ticos (deshidrataci√≥n)",
                "Corticosteroides (hiperglucemia)"
            ],
            monitoring=[
                "Funci√≥n renal cada 6 meses",
                "HbA1c cada 3 meses",
                "Vitamina B12 anual",
                "S√≠ntomas gastrointestinales"
            ],
            pregnancy_category="B"
        )
        
        # Lisinopril
        self.medications["lisinopril"] = Medication(
            name="Lisinopril",
            generic_name="Lisinopril",
            category="IECA",
            indications=[
                "Hipertensi√≥n arterial",
                "Insuficiencia card√≠aca",
                "Post-infarto agudo miocardio",
                "Nefropat√≠a diab√©tica"
            ],
            contraindications=[
                "Angioedema previo con IECA",
                "Embarazo",
                "Estenosis bilateral de arteria renal",
                "Hiperpotasemia severa"
            ],
            dosage_adult="10mg diarios, m√°ximo 40mg/d√≠a",
            dosage_pediatric="0.1mg/kg/d√≠a m√°ximo 5mg/d√≠a",
            side_effects=[
                "Tos seca",
                "Hiperpotasemia",
                "Angioedema",
                "Hipotensi√≥n",
                "Insuficiencia renal"
            ],
            interactions=[
                "Diur√©ticos ahorradores de potasio",
                "Suplementos de potasio",
                "AINE (reduce efecto)",
                "Litio (toxicidad)"
            ],
            monitoring=[
                "Presi√≥n arterial",
                "Funci√≥n renal y electrolitos",
                "Potasio s√©rico",
                "S√≠ntomas de angioedema"
            ],
            pregnancy_category="D"
        )
    
    def _add_diagnostic_procedures(self):
        """Procedimientos diagn√≥sticos"""
        
        # Electrocardiograma
        self.procedures["ecg"] = DiagnosticProcedure(
            name="Electrocardiograma",
            category="Cardiolog√≠a",
            indications=[
                "Dolor tor√°cico",
                "Palpitaciones",
                "S√≠ncope",
                "Disnea",
                "Seguimiento de arritmias"
            ],
            contraindications=["Ninguna absoluta"],
            preparation=["Paciente en reposo", "Piel limpia", "Posici√≥n supina"],
            procedure_steps=[
                "Colocar electrodos en posiciones est√°ndar",
                "Verificar calidad de la se√±al",
                "Registrar 12 derivaciones",
                "Imprimir trazado"
            ],
            interpretation=[
                "Ritmo y frecuencia",
                "Eje el√©ctrico",
                "Ondas P, QRS, T",
                "Intervalos PR, QT",
                "Signos de isquemia o infarto"
            ],
            complications=["Irritaci√≥n cut√°nea leve"],
            cost_range="$20-50 USD"
        )
        
        # Radiograf√≠a de T√≥rax
        self.procedures["rx_torax"] = DiagnosticProcedure(
            name="Radiograf√≠a de T√≥rax",
            category="Radiolog√≠a",
            indications=[
                "Disnea",
                "Dolor tor√°cico",
                "Tos persistente",
                "Fiebre",
                "Sospecha de neumon√≠a"
            ],
            contraindications=["Embarazo (relativa)"],
            preparation=["Remover objetos met√°licos", "Bata hospitalaria"],
            procedure_steps=[
                "Posici√≥n PA y lateral",
                "Inspiraci√≥n profunda",
                "Mantener inm√≥vil durante exposici√≥n"
            ],
            interpretation=[
                "Campos pulmonares",
                "Silueta card√≠aca",
                "Hilios pulmonares",
                "Diafragmas",
                "Estructuras √≥seas"
            ],
            complications=["Exposici√≥n m√≠nima a radiaci√≥n"],
            cost_range="$30-80 USD"
        )
    
    def _add_clinical_protocols(self):
        """Protocolos cl√≠nicos"""
        
        # Protocolo de Dolor Tor√°cico
        self.protocols["dolor_toracico"] = ClinicalProtocol(
            name="Protocolo de Dolor Tor√°cico en Urgencias",
            category="Emergencias",
            indication="Paciente con dolor tor√°cico en servicio de urgencias",
            steps=[
                "1. Evaluaci√≥n inicial ABCDE",
                "2. Historia cl√≠nica dirigida",
                "3. Examen f√≠sico cardiovascular",
                "4. ECG en primeros 10 minutos",
                "5. Troponinas seriadas",
                "6. Radiograf√≠a de t√≥rax",
                "7. Estratificaci√≥n de riesgo",
                "8. Decisi√≥n terap√©utica"
            ],
            decision_points=[
                "ECG con elevaci√≥n ST ‚Üí Activar c√≥digo infarto",
                "Troponinas elevadas ‚Üí Ingreso a cuidados coronarios",
                "Score HEART bajo ‚Üí Considerar alta temprana",
                "Dolor at√≠pico ‚Üí Descartar otras causas"
            ],
            emergency_modifications=[
                "Activaci√≥n inmediata de c√≥digo infarto si STEMI",
                "Antiagregaci√≥n dual si SCA confirmado",
                "Evitar AINE en pacientes con riesgo cardiovascular"
            ],
            evidence_level="A",
            last_updated="2024-01-01"
        )
        
        # Protocolo de Hipertensi√≥n
        self.protocols["hipertension"] = ClinicalProtocol(
            name="Protocolo de Manejo de Hipertensi√≥n Arterial",
            category="Cardiovascular",
            indication="Diagn√≥stico y manejo de hipertensi√≥n arterial",
            steps=[
                "1. Confirmar diagn√≥stico con m√∫ltiples mediciones",
                "2. Evaluaci√≥n de √≥rgano blanco",
                "3. Identificar factores de riesgo",
                "4. Modificaciones del estilo de vida",
                "5. Inicio de terapia farmacol√≥gica si indicada",
                "6. Monitoreo y ajuste de tratamiento"
            ],
            decision_points=[
                "PA >140/90 ‚Üí Confirmar diagn√≥stico",
                "PA >160/100 ‚Üí Iniciar tratamiento inmediato",
                "Diab√©tico o ERC ‚Üí Meta <130/80",
                "Edad >65 a√±os ‚Üí Reducci√≥n gradual"
            ],
            emergency_modifications=[
                "Crisis hipertensiva ‚Üí Reducci√≥n gradual 10-20%",
                "Emergencia hipertensiva ‚Üí UCI y reducci√≥n inmediata"
            ],
            evidence_level="A",
            last_updated="2024-01-01"
        )
    
    def _add_normal_values(self):
        """Valores normales de signos vitales y laboratorio"""
        
        # Signos vitales normales
        self.vital_signs_normal = {
            "adults": {
                "heart_rate": {"min": 60, "max": 100, "unit": "lpm"},
                "blood_pressure_systolic": {"min": 90, "max": 139, "unit": "mmHg"},
                "blood_pressure_diastolic": {"min": 60, "max": 89, "unit": "mmHg"},
                "respiratory_rate": {"min": 12, "max": 20, "unit": "rpm"},
                "temperature": {"min": 36.0, "max": 37.5, "unit": "¬∞C"},
                "oxygen_saturation": {"min": 95, "max": 100, "unit": "%"}
            },
            "pediatric": {
                "heart_rate": {"min": 80, "max": 120, "unit": "lpm"},
                "blood_pressure_systolic": {"min": 80, "max": 120, "unit": "mmHg"},
                "blood_pressure_diastolic": {"min": 50, "max": 80, "unit": "mmHg"},
                "respiratory_rate": {"min": 20, "max": 30, "unit": "rpm"},
                "temperature": {"min": 36.0, "max": 37.5, "unit": "¬∞C"},
                "oxygen_saturation": {"min": 95, "max": 100, "unit": "%"}
            }
        }
        
        # Valores de laboratorio normales
        self.lab_values_normal = {
            "hematology": {
                "hemoglobin_male": {"min": 13.5, "max": 17.5, "unit": "g/dL"},
                "hemoglobin_female": {"min": 12.0, "max": 15.5, "unit": "g/dL"},
                "hematocrit_male": {"min": 41, "max": 53, "unit": "%"},
                "hematocrit_female": {"min": 36, "max": 46, "unit": "%"},
                "platelets": {"min": 150000, "max": 450000, "unit": "/ŒºL"},
                "wbc": {"min": 4000, "max": 11000, "unit": "/ŒºL"}
            },
            "chemistry": {
                "glucose_fasting": {"min": 70, "max": 99, "unit": "mg/dL"},
                "glucose_random": {"min": 70, "max": 139, "unit": "mg/dL"},
                "creatinine_male": {"min": 0.7, "max": 1.3, "unit": "mg/dL"},
                "creatinine_female": {"min": 0.6, "max": 1.1, "unit": "mg/dL"},
                "bun": {"min": 7, "max": 20, "unit": "mg/dL"},
                "sodium": {"min": 136, "max": 145, "unit": "mEq/L"},
                "potassium": {"min": 3.5, "max": 5.1, "unit": "mEq/L"},
                "chloride": {"min": 98, "max": 107, "unit": "mEq/L"}
            },
            "lipids": {
                "total_cholesterol": {"target": "<200", "unit": "mg/dL"},
                "ldl_cholesterol": {"target": "<100", "unit": "mg/dL"},
                "hdl_cholesterol_male": {"min": 40, "unit": "mg/dL"},
                "hdl_cholesterol_female": {"min": 50, "unit": "mg/dL"},
                "triglycerides": {"target": "<150", "unit": "mg/dL"}
            },
            "cardiac": {
                "troponin_i": {"normal": "<0.04", "unit": "ng/mL"},
                "ck_mb": {"normal": "<6.3", "unit": "ng/mL"},
                "bnp": {"normal": "<100", "unit": "pg/mL"},
                "nt_probnp": {"normal": "<125", "unit": "pg/mL"}
            }
        }
    
    def search_condition_by_symptoms(self, symptoms: List[str]) -> List[str]:
        """Busca condiciones por s√≠ntomas"""
        matches = []
        for code, condition in self.conditions.items():
            for symptom in symptoms:
                if any(symptom.lower() in s.lower() for s in condition.symptoms):
                    matches.append(code)
                    break
        return matches
    
    def get_condition_info(self, code: str) -> Optional[MedicalCondition]:
        """Obtiene informaci√≥n completa de una condici√≥n"""
        return self.conditions.get(code)
    
    def get_medication_info(self, name: str) -> Optional[Medication]:
        """Obtiene informaci√≥n completa de un medicamento"""
        return self.medications.get(name.lower())
    
    def get_protocol_info(self, name: str) -> Optional[ClinicalProtocol]:
        """Obtiene informaci√≥n de un protocolo cl√≠nico"""
        return self.protocols.get(name)
    
    def interpret_vital_signs(self, vitals: Dict[str, float], age_group: str = "adults") -> Dict[str, str]:
        """Interpreta signos vitales"""
        interpretations = {}
        normal_values = self.vital_signs_normal.get(age_group, {})
        
        for vital, value in vitals.items():
            if vital in normal_values:
                normal_range = normal_values[vital]
                if value < normal_range["min"]:
                    interpretations[vital] = "Bajo"
                elif value > normal_range["max"]:
                    interpretations[vital] = "Alto"
                else:
                    interpretations[vital] = "Normal"
            else:
                interpretations[vital] = "No evaluado"
        
        return interpretations
    
    def interpret_lab_values(self, labs: Dict[str, float], patient_gender: str = "male") -> Dict[str, str]:
        """Interpreta valores de laboratorio"""
        interpretations = {}
        
        for lab, value in labs.items():
            # Buscar en todas las categor√≠as
            found = False
            for category, tests in self.lab_values_normal.items():
                if lab in tests:
                    normal_range = tests[lab]
                    
                    # Manejar rangos espec√≠ficos por g√©nero
                    if f"{lab}_{patient_gender}" in tests:
                        normal_range = tests[f"{lab}_{patient_gender}"]
                    
                    if "min" in normal_range and "max" in normal_range:
                        if value < normal_range["min"]:
                            interpretations[lab] = "Bajo"
                        elif value > normal_range["max"]:
                            interpretations[lab] = "Alto"
                        else:
                            interpretations[lab] = "Normal"
                    elif "target" in normal_range:
                        target_val = float(normal_range["target"].replace("<", "").replace(">", ""))
                        if "<" in normal_range["target"]:
                            interpretations[lab] = "Normal" if value < target_val else "Alto"
                        elif ">" in normal_range["target"]:
                            interpretations[lab] = "Normal" if value > target_val else "Bajo"
                    elif "normal" in normal_range:
                        normal_val = float(normal_range["normal"].replace("<", "").replace(">", ""))
                        if "<" in normal_range["normal"]:
                            interpretations[lab] = "Normal" if value < normal_val else "Elevado"
                    
                    found = True
                    break
            
            if not found:
                interpretations[lab] = "No evaluado"
        
        return interpretations
    
    def export_knowledge_base(self) -> Dict[str, Any]:
        """Exporta toda la base de conocimiento"""
        return {
            "conditions": {k: asdict(v) for k, v in self.conditions.items()},
            "medications": {k: asdict(v) for k, v in self.medications.items()},
            "procedures": {k: asdict(v) for k, v in self.procedures.items()},
            "protocols": {k: asdict(v) for k, v in self.protocols.items()},
            "vital_signs_normal": self.vital_signs_normal,
            "lab_values_normal": self.lab_values_normal,
            "export_date": datetime.now().isoformat()
        }

# Funci√≥n de prueba
def test_knowledge_base():
    """Prueba la base de conocimiento"""
    kb = MedicalKnowledgeBase()
    
    print("üß™ PROBANDO BASE DE CONOCIMIENTO M√âDICA")
    print("=" * 60)
    
    # Probar b√∫squeda por s√≠ntomas
    symptoms = ["dolor tor√°cico", "disnea"]
    matches = kb.search_condition_by_symptoms(symptoms)
    print(f"Condiciones para s√≠ntomas {symptoms}: {matches}")
    
    # Probar informaci√≥n de condici√≥n
    if matches:
        condition = kb.get_condition_info(matches[0])
        if condition:
            print(f"\nCondici√≥n: {condition.name}")
            print(f"Descripci√≥n: {condition.description}")
            print(f"Tratamiento: {condition.treatment_protocol[:2]}")
    
    # Probar medicamentos
    med = kb.get_medication_info("aspirina")
    if med:
        print(f"\nMedicamento: {med.name}")
        print(f"Indicaciones: {med.indications[:2]}")
    
    # Probar interpretaci√≥n de signos vitales
    vitals = {"heart_rate": 120, "blood_pressure_systolic": 160}
    interpretations = kb.interpret_vital_signs(vitals)
    print(f"\nSignos vitales: {interpretations}")
    
    print(f"\nTotal condiciones: {len(kb.conditions)}")
    print(f"Total medicamentos: {len(kb.medications)}")
    print(f"Total procedimientos: {len(kb.procedures)}")
    print(f"Total protocolos: {len(kb.protocols)}")

if __name__ == "__main__":
    test_knowledge_base()