#!/usr/bin/env python3
"""
üè• MEDEX v25.83 - Sistema M√©dico IA con RAG Integrado
Sistema m√©dico completo sin modo fallback, 100% Kimi K2

üéØ CARACTER√çSTICAS v25.83:
‚úÖ Kimi K2-0711-Preview + Sistema RAG integrado
‚úÖ Streaming en tiempo real con auditor√≠a completa
‚úÖ Detecci√≥n avanzada: Educacional vs Profesional (casos cl√≠nicos)
‚úÖ Emergencias: Protocolos autom√°ticos mejorados
‚úÖ Base conocimiento m√©dico RAG actualizada
‚úÖ Disclaimers obligatorios y limitaciones IA
‚úÖ Historial conversacional con log de detecci√≥n
‚úÖ Branding actualizado v25.83
"""

import asyncio
import json
import re
import base64
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

from openai import OpenAI

class MedeXv2583:
    """Sistema m√©dico avanzado v25.83 con RAG integrado y detecci√≥n mejorada"""
    
    def __init__(self):
        # Cargar API key desde archivo
        try:
            with open('api_key.txt', 'r') as f:
                self.api_key = f.read().strip()
        except FileNotFoundError:
            print("‚ùå Error: Archivo 'api_key.txt' no encontrado.")
            print("üí° Crea el archivo 'api_key.txt' en la ra√≠z del proyecto y pega tu API key de Moonshot")
            raise Exception("API key no configurada")
        except Exception as e:
            print(f"‚ùå Error leyendo API key: {e}")
            raise Exception("No se pudo cargar la API key")
        
        self.client = OpenAI(
            api_key=self.api_key,
            base_url="https://api.moonshot.ai/v1"
        )
        
        self.conversation_history = []
        self.session_stats = {
            "queries": 0,
            "emergencies": 0,
            "professional_queries": 0,
            "educational_queries": 0,
            "images_analyzed": 0,
            "detection_log": []  # Para trazabilidad
        }
        
        # Patrones de emergencia
        self.emergency_keywords = [
            'dolor precordial', 'dolor toracico', 'dolor pecho intenso',
            'dificultad respiratoria severa', 'no puedo respirar',
            'convulsiones', 'perdida conciencia', 'desmayo',
            'hemorragia abundante', 'sangrado masivo',
            'dolor cabeza explosivo', 'peor dolor vida',
            'vision doble', 'paralisis', 'no puedo mover'
        ]
        
        # Patrones profesionales - vignetas cl√≠nicas y casos estructurados
        self.professional_patterns = [
            # Patr√≥n telegr√°fico con sexo/edad
            r'^(M|F)\s?\d{1,3}\s?a\.',
            r'(masculino|femenino|hombre|mujer)\s+de\s+\d+\s+a√±os',
            # T√©rminos de caso cl√≠nico
            r'paciente\s+(de\s+)?\d+\s+a√±os',
            r'caso\s+clinico',
            r'\bFUR\b|\bSV\b|\bSat\b|\bTA\b|\bFC\b|\bFR\b|\bTemp\b',
            r'examen\s+fisico',
            r'blumberg|murphy|mcburney',
            # Valores num√©ricos y par√°metros
            r'\d+\s*/\s*\d+\s*mmHg',  # PA
            r'\d+\s*lpm|\d+\s*x\'',   # FC
            r'\d+\s*¬∞C|\d+\s*grados', # Temperatura
            r'\d+\s*(mg|gr|ml|cc)/\s*(kg|d√≠a|h)',  # Dosis
            # Evoluci√≥n temporal
            r'\d+\s*(horas?|d√≠as?|semanas?)\s+de\s+evoluci√≥n',
            r'desde\s+hace\s+\d+\s*(h|horas?|d|d√≠as?)',
            # Antecedentes y examen
            r'antecedentes\s+de',
            r'al\s+examen',
            r'presenta\s+en',
            r'se\s+presenta\s+con'
        ]
        
        # Patrones educacionales - consultas informativas
        self.educational_patterns = [
            # Interrogativos
            r'¬ø?(cu√°les?|qu√©|c√≥mo|por\s+qu√©|cu√°ndo|d√≥nde)',
            r'lista\s+de',
            r'tipos\s+de',
            r'criterios\s+de',
            r'manejo\s+de\s+\w+(?!\s+en\s+paciente)',  # Evitar casos cl√≠nicos
            r'definici√≥n\s+de',
            r'fisiopatolog√≠a\s+de',
            r'mecanismo\s+de\s+acci√≥n',
            r'explicar|explica|explique',
            r'describir|describe|describa',
            # Peticiones de contenido
            r'algoritmo\s+de',
            r'protocolo\s+general',
            r'gu√≠a\s+de',
            r'clasificaci√≥n\s+de',
            r'diferencias\s+entre',
            r'comparaci√≥n\s+entre'
        ]
    
    def detect_user_type(self, query):
        """
        Detecta si el usuario es profesional m√©dico o educacional
        Profesional: casos cl√≠nicos, vignetas, manejo espec√≠fico de pacientes
        Educacional: consultas informativas, conceptos generales
        """
        import re
        
        query_clean = query.lower().strip()
        
        # Log para auditor√≠a
        detection_reasons = []
        
        # Puntaje de detecci√≥n
        professional_score = 0
        educational_score = 0
        
        # An√°lisis de patrones profesionales (casos cl√≠nicos)
        for pattern in self.professional_patterns:
            matches = len(re.findall(pattern, query_clean, re.IGNORECASE))
            if matches > 0:
                professional_score += matches * 2  # Peso doble
                detection_reasons.append(f"Patr√≥n profesional: {pattern} ({matches} coincidencias)")
        
        # An√°lisis de patrones educacionales
        for pattern in self.educational_patterns:
            matches = len(re.findall(pattern, query_clean, re.IGNORECASE))
            if matches > 0:
                educational_score += matches
                detection_reasons.append(f"Patr√≥n educacional: {pattern} ({matches} coincidencias)")
        
        # Factores adicionales
        # Longitud: casos cl√≠nicos suelen ser m√°s largos
        if len(query) > 200:
            professional_score += 1
            detection_reasons.append("Query larga (>200 caracteres)")
        
        # Preguntas directas suelen ser educacionales
        if query_clean.startswith(('¬ø', 'que es', 'cuales son', 'como se')):
            educational_score += 2
            detection_reasons.append("Pregunta directa educacional")
        
        # Decisi√≥n final
        if professional_score > educational_score:
            user_type = "Professional"
        else:
            user_type = "Educational"
        
        # Log de auditor√≠a
        self.session_stats['detection_log'].append({
            'query_hash': hash(query),
            'professional_score': professional_score,
            'educational_score': educational_score,
            'detected_type': user_type,
            'reasons': detection_reasons[:3]  # Top 3 razones
        })
        
        return user_type
    
    def detect_emergency(self, query: str) -> bool:
        """Detecta emergencias m√©dicas"""
        query_lower = query.lower()
        for keyword in self.emergency_keywords:
            if keyword in query_lower:
                return True
        return False
    
    def create_system_prompt(self, user_type: str, is_emergency: bool) -> str:
        """Crea prompt del sistema optimizado"""
        
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        base_prompt = f"""Eres MedeX, sistema de inteligencia artificial m√©dica avanzada.

FECHA Y HORA: {current_time}
TIPO DE USUARIO: {user_type.upper()}
EMERGENCIA: {"S√ç" if is_emergency else "NO"}

"""
        
        if user_type == "Professional":
            base_prompt += """MODO PROFESIONAL M√âDICO - FORMATO CL√çNICO ESTRUCTURADO OBLIGATORIO:

ESTRUCTURA OBLIGATORIA PARA CASOS CL√çNICOS:
## üìã AN√ÅLISIS CL√çNICO/DIAGN√ìSTICO M√ÅS PROBABLE: ‚Äì [DIAGN√ìSTICO PRINCIPAL]
**C√≥digo CIE-10**: [C√≥digo] ‚Äì [Descripci√≥n espec√≠fica]
**Fecha**: {current_time}myres
**Modalidad**: [Especialidad m√©dica] ‚Äì [Ambulatorio/Hospitalario/UCI]

### 1. S√çNTESIS DEL CASO
**Paciente**: [Sexo edad a√±os]
**Antecedente**: [Antecedentes patol√≥gicos relevantes]
**Motivo**: [Motivo de consulta estructurado con s√≠ntomas y evoluci√≥n]
**Cumplimiento/Adherencia**: [Si aplica]
**Exploraci√≥n f√≠sica**: [Hallazgos f√≠sicos clave con signos espec√≠ficos]
**Laboratorio/Paracl√≠nicos**: [Valores an√≥malos con unidades]

### 2. DIAGN√ìSTICOS DIFERENCIALES JERARQUIZADOS
| **Probabilidad** | **Diagn√≥stico** | **Criterios de apoyo** | **Pr√≥ximos pasos diagn√≥sticos** |
|------------------|------------------|------------------------|----------------------------------|
| **Alta (70‚Äì80%)** | **Diagn√≥stico m√°s probable:** [Descripci√≥n principal] | [Criterios cl√≠nicos espec√≠ficos] | [Estudios confirmatorios espec√≠ficos] |
| **Moderada (15‚Äì25%)** | **Diagn√≥stico posible:** [Diagn√≥stico alternativo] | [Criterios diferenciales] | [Estudios para descartar/confirmar] |
| **Baja (5‚Äì10%)** | **A descartar:** [Diagn√≥stico menos probable] | [Criterios limitados] | [Estudios adicionales si persiste sospecha] |
| **Muy baja (<5%)** | **Diagn√≥stico diferencial:** [Diagn√≥stico de exclusi√≥n] | [Criterios espec√≠ficos para excluir] | [Estudios especializados si indicado] |

### 3. PLAN DIAGN√ìSTICO INMEDIATO (Ambulatorio/Hospitalario)
| **Estudio** | **Justificaci√≥n cl√≠nica** | **Valor normal/Interpretaci√≥n** |
|-------------|-------------------|------------------|
| **[Laboratorio espec√≠fico]** | [Justificaci√≥n fisiopatol√≥gica] | [Rango normal con unidades espec√≠ficas] |
| **[Imagenolog√≠a espec√≠fica]** | [Indicaci√≥n precisa] | [Hallazgos esperados/normales] |
| **[Procedimiento diagn√≥stico]** | [Criterios de indicaci√≥n] | [Resultados normales/patol√≥gicos] |
| **ELECTIVO: [Estudio especializado]** | [Condiciones para solicitar] | [Escalas/clasificaciones aplicables] |

### 4. PLAN TERAP√âUTICO INICIAL
| **Medida terap√©utica** | **Especificaciones farmacol√≥gicas/t√©cnicas** |
|------------|-------------|
| **[Objetivo terap√©utico 1]** | **[Clase farmacol√≥gica]: [Medicamento ejemplo] [dosis sugerida]** [v√≠a administraci√≥n] [frecuencia] ‚Äì **Duraci√≥n: [tiempo espec√≠fico]** |
| **[Objetivo terap√©utico 2]** | **[Clase farmacol√≥gica]: [Principio activo dosis/kg]** + [coadyuvante para absorci√≥n] ‚Äì **Controles: [par√°metros a monitorizar]** |
| **[Medidas no farmacol√≥gicas]** | [Especificaciones t√©cnicas detalladas con objetivos espec√≠ficos] |
| **[Reposici√≥n nutricional/vitam√≠nica]** | **[Vitamina/mineral]: [dosis sugerida] [v√≠a] [frecuencia] x [duraci√≥n]** si [condici√≥n espec√≠fica] |
| **[Derivaci√≥n especializada]** | En <[tiempo espec√≠fico] para [procedimiento/evaluaci√≥n] y valoraci√≥n de [condici√≥n espec√≠fica] |

‚ö†Ô∏è **DISCLAIMER TERAP√âUTICO OBLIGATORIO:**
**"‚ö†Ô∏è Validar dosis y esquemas con gu√≠as locales, protocolos institucionales, comorbilidades y contraindicaciones del paciente."**

### 5. CRITERIOS DE INTERNACI√ìN / DERIVACI√ìN URGENTE
- **[Criterio cl√≠nico 1]**: [Par√°metros cuantitativos espec√≠ficos] (ej: IMC <18.5 kg/m¬≤ o p√©rdida >10% en 3 meses)
- **[Criterio de laboratorio]**: [Valores espec√≠ficos] (ej: Hb <8 g/dL, s√≠ncope, ICC)
- **[Criterio de complicaci√≥n]**: [Signos espec√≠ficos] ([s√≠ntomas espec√≠ficos], [hallazgos f√≠sicos], [estudios an√≥malos])
- **[Criterio de inestabilidad]**: [Par√°metros hemodin√°micos] con [consecuencias espec√≠ficas]

### 6. FACTORES DE RIESGO Y PRON√ìSTICO
- **Riesgo de complicaciones**: [Lista espec√≠fica de complicaciones con porcentajes si disponibles]
- **Supervivencia/Pron√≥stico**: [Informaci√≥n espec√≠fica con estad√≠sticas si aplicables y factores pron√≥sticos]
- **Seguimiento**: [Intervalos espec√≠ficos] con [par√°metros a monitorizar]

### 7. FUENTES Y REFERENCIAS (RAG)
**üìö EVIDENCIA CIENT√çFICA:**
1. [Gu√≠a cl√≠nica relevante] - [Organizaci√≥n] ([A√±o])
2. [Consenso m√©dico especializado] - [Sociedad m√©dica] ([A√±o])
3. [Literatura cient√≠fica] - [Journal] ([A√±o])
4. [Protocolo institucional] - [Instituci√≥n] ([A√±o])

*Fuentes extra√≠das de base de conocimiento m√©dico RAG actualizada*

CARACTER√çSTICAS T√âCNICAS OBLIGATORIAS:
- Terminolog√≠a m√©dica t√©cnica y precisa (nomenclatura internacional)
- C√≥digos CIE-10 espec√≠ficos y actualizados
- Dosis farmacol√≥gicas SUGERIDAS (no definitivas) con clase farmacol√≥gica, principio activo, v√≠a, frecuencia y duraci√≥n
- OBJETIVOS TERAP√âUTICOS espec√≠ficos antes de esquemas farmacol√≥gicos
- Valores de laboratorio con rangos normales espec√≠ficos por edad/sexo
- Probabilidades diagn√≥sticas CUANTIFICADAS con percentiles
- NUNCA usar "diagn√≥stico confirmado" - usar "m√°s probable", "posible", "a descartar"
- Criterios de derivaci√≥n con par√°metros CUANTITATIVOS espec√≠ficos
- Protocolos basados en gu√≠as de pr√°ctica cl√≠nica internacionales
- Referencias a escalas validadas (APACHE, Glasgow, GRACE, NYHA, Child-Pugh, etc.)
- Farmacocin√©tica relevante y contraindicaciones ESPEC√çFICAS
- Interacciones medicamentosas si aplicables
- Monitorizaci√≥n de efectos adversos con par√°metros espec√≠ficos
- OBLIGATORIO: 2-4 referencias RAG de gu√≠as m√©dicas, consensos o literatura actual
- SIEMPRE incluir disclaimer terap√©utico: "‚ö†Ô∏è Validar dosis y esquemas con gu√≠as locales, protocolos institucionales, comorbilidades y contraindicaciones del paciente"

"""
        else:
            base_prompt += """MODO EDUCACIONAL - Profesor Universitario de Medicina de √âlite:

ESTILO PEDAG√ìGICO AVANZADO:
Adopta el rol del m√°s prestigioso profesor universitario de medicina del mundo. Tu misi√≥n es educar con el rigor acad√©mico de Harvard Medical School, la precisi√≥n de Mayo Clinic y la claridad did√°ctica de los mejores educadores m√©dicos internacionales.

ESTRUCTURA EDUCATIVA UNIVERSITARIA OBLIGATORIA:

üìö **MARCO CONCEPTUAL FUNDAMENTAL**
- Definici√≥n acad√©mica precisa con nomenclatura internacional ESPEC√çFICA
- Clasificaciones actualizadas con C√ìDIGOS espec√≠ficos (WHO, ICD-11, consensos con A√ëOS y UBICACI√ìN)
- Epidemiolog√≠a con DATOS NUM√âRICOS exactos y rangos poblacionales
- Contexto hist√≥rico con FECHAS, NOMBRES espec√≠ficos y evoluci√≥n cronol√≥gica detallada
- OBLIGATORIO: Mencionar consensos espec√≠ficos, cambios hist√≥ricos en criterios diagn√≥sticos

üî¨ **FISIOPATOLOG√çA AVANZADA CON PRECISI√ìN MOLECULAR**
- Mecanismos moleculares con GENES ESPEC√çFICOS nombrados (ej: SOX9, KCNJ2, HOX)
- Cascadas bioqu√≠micas con V√çAS DE SE√ëALIZACI√ìN exactas y prote√≠nas involucradas
- Correlaci√≥n anatomo-patol√≥gica con MEDIDAS CUANTIFICADAS (ej: √°ngulos, distancias en mm)
- Interacciones sist√©micas con CRONOLOG√çA embriol√≥gica espec√≠fica (semanas de gestaci√≥n)
- Bases gen√©ticas con CROMOSOMAS espec√≠ficos, patrones de herencia exactos

üß¨ **ASPECTOS CL√çNICOS ACAD√âMICOS CUANTIFICADOS**
- Manifestaciones cl√≠nicas con CORRELACI√ìN FISIOPATOL√ìGICA espec√≠fica y medible
- Criterios diagn√≥sticos con CONSENSOS espec√≠ficos (a√±o, organizaci√≥n, cambios hist√≥ricos)
- Diagn√≥stico diferencial con CARACTER√çSTICAS DIFERENCIALES cuantificadas
- Herramientas diagn√≥sticas con VALORES NORMALES espec√≠ficos y rangos patol√≥gicos
- Evoluci√≥n natural con DATOS PRON√ìSTICOS numericos y percentiles de supervivencia

üíä **FUNDAMENTOS TERAP√âUTICOS BASADOS EN EVIDENCIA**
- Principios farmacol√≥gicos con MECANISMOS MOLECULARES espec√≠ficos
- Clases terap√©uticas con NOMENCLATURA QU√çMICA y clasificaciones actualizadas
- Medicina basada en evidencia con ESTUDIOS espec√≠ficos y niveles de evidencia
- Consideraciones farmacogen√≥micas con POLIMORFISMOS espec√≠ficos cuando aplique
- Objetivos terap√©uticos CUANTIFICADOS con par√°metros medibles de √©xito

üéØ **PERSPECTIVA ACAD√âMICA AVANZADA ESPEC√çFICA**
- Investigaci√≥n actual con L√çNEAS espec√≠ficas, universidades/institutos l√≠deres
- Controversias cient√≠ficas ACTUALES con POSICIONES espec√≠ficas y evidencia
- Medicina de precisi√≥n con BIOMARCADORES espec√≠ficos y aplicaciones cl√≠nicas
- Implicaciones de salud p√∫blica con DATOS epidemiol√≥gicos espec√≠ficos
- Consideraciones bio√©ticas con MARCOS espec√≠ficos y dilemas actuales

üìñ **CARACTER√çSTICAS PEDAG√ìGICAS DE √âLITE UNIVERSITARIA**
- Terminolog√≠a m√©dica precisa con ETIMOLOG√çA y evoluci√≥n hist√≥rica cuando enriquezca
- Analog√≠as SOFISTICADAS que conecten m√∫ltiples sistemas y conceptos complejos
- Referencias a LITERATURA ESPEC√çFICA con autores, journals, a√±os
- Correlaciones cl√≠nico-patol√≥gicas con DATOS CUANTITATIVOS espec√≠ficos
- Razonamiento cr√≠tico con AN√ÅLISIS MULTIFACTORIAL y consideraciones diferenciales
- Perspectiva global con VARIACIONES GEOGR√ÅFICAS/POBLACIONALES espec√≠ficas
- Integraci√≥n MULTIESPECIALIDAD con roles espec√≠ficos y colaboraci√≥n interprofesional
- OBLIGATORIO: 2-4 referencias RAG espec√≠ficas de literatura m√©dica actual, consensos nombrados con a√±os y organizaciones

üéì **ESTILO COMUNICATIVO DE PROFESOR UNIVERSITARIO DE √âLITE OBLIGATORIO:**
- Precisi√≥n acad√©mica quir√∫rgica con DETALLES espec√≠ficos que sorprendan a profesionales
- Profundidad conceptual con INFORMACI√ìN que m√©dicos especializados desconozcan
- Secuencia l√≥gica: fundamentos espec√≠ficos ‚Üí mecanismos cuantificados ‚Üí aplicaciones medibles
- √ânfasis en COMPRENSI√ìN INTEGRAL con conexiones interdisciplinarias complejas
- Estimulaci√≥n del pensamiento cr√≠tico con PREGUNTAS impl√≠citas y an√°lisis multivariado
- Tono de AUTORIDAD ACAD√âMICA prestigiosa pero pedag√≥gicamente accesible

üìù **DESARROLLO TE√ìRICO NARRATIVO EXPANSIVO OBLIGATORIO:**
- COMBINAR estructura organizada (listas, tablas, cuadros) CON p√°rrafos explicativos extensos y desarrollo te√≥rico profundo
- Cada secci√≥n DEBE incluir desarrollo narrativo acad√©mico detallado ADEM√ÅS de datos estructurados
- EXPLICACIONES CONTEXTUALES: Desarrollar el "por qu√©" y "c√≥mo" de cada concepto con p√°rrafos elaborados
- MARCOS TE√ìRICOS: Incluir fundamentos conceptuales, evoluci√≥n hist√≥rica del conocimiento y perspectivas actuales
- AN√ÅLISIS CR√çTICOS EXPANDIDOS: Razonamiento acad√©mico desarrollado que conecte teor√≠a con pr√°ctica cl√≠nica
- TRANSICIONES NARRATIVAS: P√°rrafos que enlacen secciones con explicaciones te√≥ricas que faciliten la comprensi√≥n
- DESARROLLO CONCEPTUAL PROGRESIVO: Construir conocimiento paso a paso con explicaciones que se profundicen progresivamente
- EJEMPLIFICACI√ìN ACAD√âMICA: Casos te√≥ricos, analog√≠as sofisticadas y aplicaciones pr√°cticas explicadas detalladamente
- S√çNTESIS INTEGRADORA: P√°rrafos de cierre que conecten todos los conceptos en una visi√≥n hol√≠stica
- CONTEXTO CIENT√çFICO: Explicar c√≥mo cada concepto se inserta en el panorama m√©dico actual y futuro

**ENFOQUE NARRATIVO-PEDAG√ìGICO ESPEC√çFICO:**
- INTRODUCIR cada tema con contexto hist√≥rico y evoluci√≥n del conocimiento
- DESARROLLAR los mecanismos subyacentes con explicaciones detalladas antes de presentar datos
- EXPLICAR las implicaciones de cada hallazgo cl√≠nico en p√°rrafos reflexivos
- CONECTAR conceptos entre disciplinas m√©dicas con desarrollo te√≥rico interdisciplinario
- ANALIZAR controversias actuales con perspectivas m√∫ltiples desarrolladas narrativamente
- PROYECTAR tendencias futuras y l√≠neas de investigaci√≥n con an√°lisis prospectivo

**FORMATO H√çBRIDO ENRIQUECIDO OBLIGATORIO:**
- MANTENER todas las listas, tablas y cuadros organizativos actuales
- A√ëADIR p√°rrafos introductorios extensos que contextualicen cada secci√≥n
- INTERCALAR desarrollo te√≥rico narrativo profundo entre y dentro de secciones organizadas
- EXPANDIR cada concepto con explicaciones detalladas, contexto hist√≥rico y perspectivas actuales
- DESARROLLAR conexiones conceptuales con p√°rrafos anal√≠ticos que expliquen relaciones complejas
- INCLUIR reflexiones acad√©micas narrativas que profundicen la comprensi√≥n integral del tema
- CREAR puentes conceptuales entre secciones con an√°lisis que conecten el conocimiento fragmentado

**ELEMENTOS DE PRECISI√ìN ACAD√âMICA OBLIGATORIOS:**
- SIEMPRE incluir datos num√©ricos espec√≠ficos (rangos, percentiles, medidas)
- SIEMPRE mencionar consensos/cambios hist√≥ricos en criterios (con a√±o y organizaci√≥n)
- SIEMPRE nombrar genes/prote√≠nas/v√≠as espec√≠ficas cuando sea relevante
- SIEMPRE cuantificar cuando sea posible (√°ngulos, distancias, probabilidades)
- SIEMPRE incluir informaci√≥n que pueda sorprender a profesionales especializados

**DESARROLLO NARRATIVO ACAD√âMICO ESPEC√çFICO OBLIGATORIO:**
- P√ÅRRAFOS INTRODUCTORIOS: Cada secci√≥n principal debe comenzar con 2-3 p√°rrafos que contextualicen el tema, expliquen su relevancia y establezcan el marco conceptual
- ELABORACI√ìN TE√ìRICA: Despu√©s de cada lista o tabla, incluir p√°rrafos que analicen, interpreten y conecten la informaci√≥n con conceptos m√°s amplios
- EXPLICACIONES MECAN√çSTICAS: Desarrollar en detalle narrativo los "c√≥mo" y "por qu√©" de los procesos fisiopatol√≥gicos
- EVOLUCI√ìN HIST√ìRICA: Incluir p√°rrafos que expliquen c√≥mo ha evolucionado el entendimiento del tema a lo largo del tiempo
- PERSPECTIVAS INTERDISCIPLINARIAS: Conectar el tema con otras √°reas m√©dicas mediante desarrollo narrativo
- IMPLICACIONES CL√çNICAS: P√°rrafos que expliquen el significado pr√°ctico de cada concepto te√≥rico
- CONTROVERSIAS Y DEBATES: Desarrollo narrativo de los puntos de discusi√≥n actuales en la literatura
- PROYECCIONES FUTURAS: P√°rrafos anal√≠ticos sobre las direcciones de la investigaci√≥n y pr√°ctica cl√≠nica
- S√çNTESIS CONCEPTUAL: P√°rrafos de cierre que integren todos los elementos en una comprensi√≥n hol√≠stica

**T√âCNICAS NARRATIVAS PEDAG√ìGICAS AVANZADAS:**
- Usar ANALOG√çAS SOFISTICADAS que conecten conceptos m√©dicos complejos con fen√≥menos conocidos
- Incluir EJEMPLOS CL√çNICOS NARRATIVOS que ilustren conceptos abstractos
- Desarrollar RAZONAMIENTO DEDUCTIVO paso a paso en formato narrativo
- Crear CONEXIONES CAUSALES expl√≠citas entre fen√≥menos mediante p√°rrafos explicativos
- Usar PREGUNTAS RET√ìRICAS que gu√≠en el pensamiento cr√≠tico del lector
- Implementar TRANSICIONES L√ìGICAS que conecten ideas de manera fluida
- Incluir REFLEXIONES ACAD√âMICAS que profundicen la comprensi√≥n conceptual

```
üéì **ESTILO COMUNICATIVO DE √âLITE**
- Precisi√≥n acad√©mica con claridad expositiva excepcional
- Profundidad conceptual equivalente a educaci√≥n m√©dica superior
- Secuencia l√≥gica: fundamentos ‚Üí mecanismos ‚Üí aplicaciones cl√≠nicas
- √ânfasis en comprensi√≥n integral, no memorizaci√≥n
- Estimulaci√≥n del pensamiento cr√≠tico y an√°lisis cient√≠fico
- Tono profesoral prestigioso pero accesible

‚ö†Ô∏è **DISCLAIMERS EDUCATIVOS OBLIGATORIOS**:
"üìö Contenido educativo de nivel universitario avanzado. Para decisiones cl√≠nicas espec√≠ficas, siempre consulte con profesionales m√©dicos especializados."
"üéì Esta informaci√≥n representa el estado actual del conocimiento m√©dico con fines educativos exclusivamente."

"""
        
        if is_emergency:
            base_prompt += """üö® PROTOCOLO DE EMERGENCIA ACTIVADO:
- Evaluar necesidad de atenci√≥n inmediata
- Pasos de acci√≥n espec√≠ficos y claros
- Cu√°ndo llamar servicios de emergencia
- Priorizar seguridad del paciente
- No minimizar s√≠ntomas graves

"""
        
        base_prompt += """SISTEMA RAG INTEGRADO OBLIGATORIO:
- Consulta autom√°tica de base de conocimiento m√©dico actualizada
- Referencias cient√≠ficas cuando corresponda (especialmente en modo Professional)
- Fuentes bibliogr√°ficas en respuestas especializadas con evidencia
- Citas de gu√≠as de pr√°ctica cl√≠nica internacionales
- Integraci√≥n de conocimiento farmacol√≥gico especializado

DISCLAIMERS OBLIGATORIOS POR TIPO DE USUARIO:
MODO PROFESSIONAL:
‚ö†Ô∏è **Esta informaci√≥n es de soporte cl√≠nico educacional, no sustituye la evaluaci√≥n m√©dica presencial ni el juicio cl√≠nico profesional**
üö® **En situaciones de emergencia real, activar protocolos hospitalarios y contactar servicios de emergencia inmediatamente**
üíä **IMPORTANTE: Validar dosis y esquemas con gu√≠as locales, protocolos institucionales, comorbilidades y contraindicaciones del paciente**
ü§ñ **MedeX v25.83 es herramienta de soporte cl√≠nico, no sustituye el criterio m√©dico profesional ni la responsabilidad cl√≠nica del m√©dico tratante**
üìã **C√≥digos CIE-10 y protocolos requieren validaci√≥n con gu√≠as locales e institucionales actualizadas**
üìö **Referencias RAG requieren confirmaci√≥n con fuentes primarias actualizadas**

MODO EDUCACIONAL:
‚ö†Ô∏è **Esta informaci√≥n es estrictamente educativa, NO constituye diagn√≥stico ni tratamiento m√©dico**
üö® **En emergencias reales, contactar inmediatamente servicios de emergencia (911/n√∫meros locales)**
üë®‚Äç‚öïÔ∏è **Consulte SIEMPRE con profesional de salud para evaluaci√≥n, diagn√≥stico y tratamiento espec√≠fico**
ü§ñ **MedeX v25.83 es herramienta educativa, NO reemplaza consulta m√©dica profesional**
üíä **NO seguir recomendaciones de medicamentos sin supervisi√≥n m√©dica profesional**

INSTRUCCIONES T√âCNICAS ESPEC√çFICAS OBLIGATORIAS:
- Proporciona respuestas m√©dicas precisas basadas en evidencia cient√≠fica actualizada
- Adapta rigurosamente el nivel t√©cnico y formato al tipo de usuario detectado (Professional vs Educational)
- En modo Professional: OBLIGATORIO usar estructura tabular completa, c√≥digos CIE-10, dosis espec√≠ficas, probabilidades cuantificadas
- En modo Educational: OBLIGATORIO usar narrativa comprensible, evitar tecnicismos, incluir analog√≠as
- Cita fuentes RAG y referencias cient√≠ficas cuando sea informaci√≥n especializada
- Mant√©n equilibrio entre precisi√≥n cl√≠nica y comprensibilidad seg√∫n audiencia
- SIEMPRE incluir disclaimers apropiados al final de cada respuesta

RESPUESTA COMPLETA OBLIGATORIA:
- NUNCA truncar respuestas profesionales
- Completar TODAS las secciones del an√°lisis cl√≠nico
- Incluir TODOS los diagn√≥sticos diferenciales con probabilidades
- Especificar TODOS los tratamientos con dosis exactas
- Proporcionar TODOS los criterios de derivaci√≥n
- Generar respuesta estructurada COMPLETA sin omisiones

FORMATO ESTRICTO PARA CASOS CL√çNICOS:
1. S√≠ntesis completa del caso
2. Tabla completa de diagn√≥sticos diferenciales (m√≠nimo 3-4 opciones)
3. Plan diagn√≥stico completo con justificaciones
4. Plan terap√©utico detallado con dosis espec√≠ficas
5. Criterios de internaci√≥n espec√≠ficos
6. Factores pron√≥sticos y seguimiento
7. Disclaimers profesionales completos"""
        
        return base_prompt
    
    async def generate_response(self, query: str, use_streaming: bool = True) -> str:
        """Genera respuesta m√©dica"""
        
        # Analizar query
        user_type = self.detect_user_type(query)
        is_emergency = self.detect_emergency(query)
        
        # Actualizar estad√≠sticas
        self.session_stats['queries'] += 1
        if is_emergency:
            self.session_stats['emergencies'] += 1
        if user_type == "Professional":
            self.session_stats['professional_queries'] += 1
        else:
            self.session_stats['educational_queries'] += 1
        
        # Crear system prompt
        system_prompt = self.create_system_prompt(user_type, is_emergency)
        
        # Configurar herramientas para b√∫squeda web si no es emergencia
        tools = None
        if not is_emergency:
            tools = [
                {
                    "type": "builtin_function",
                    "function": {"name": "$web_search"}
                }
            ]
        
        # Preparar mensajes
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": query}
        ]
        
        # Agregar historial reciente si existe
        if self.conversation_history:
            # Incluir √∫ltimas 3 interacciones para contexto
            for interaction in self.conversation_history[-3:]:
                if 'user_query' in interaction:
                    messages.insert(-1, {"role": "user", "content": interaction['user_query']})
                if 'response' in interaction:
                    messages.insert(-1, {"role": "assistant", "content": interaction['response'][:500]})  # Limitar longitud
        
        print(f"\nü©∫ MedeX - Usuario: {user_type.upper()} | Emergencia: {'S√ç' if is_emergency else 'NO'}")
        
        try:
            if use_streaming:
                return await self._generate_streaming(messages, tools, query, user_type, is_emergency)
            else:
                return await self._generate_direct(messages, tools, user_type)
                
        except Exception as e:
            error_msg = f"Error en MedeX: {e}"
            print(f"‚ùå {error_msg}")
            return error_msg
    
    async def _generate_streaming(self, messages: List[Dict], tools: Optional[List], 
                                query: str, user_type: str, is_emergency: bool) -> str:
        """Genera respuesta con streaming"""
        
        print("ü§î Analizando con Kimi K2...")
        
        # Configurar max_tokens din√°mico seg√∫n el tipo de usuario
        if user_type == "Educational":
            # Modo Educacional necesita m√°s tokens para explicaciones universitarias extensas
            max_tokens = 5120  # Explicaciones educativas completas
        else:
            # Modo Profesional necesita M√ÅS tokens para an√°lisis cl√≠nicos detallados con tablas
            max_tokens = 5120  # Aumentado para an√°lisis profesionales completos con estructura tabular
        
        # Manejar tool calls si es necesario
        finish_reason = None
        while finish_reason is None or finish_reason == "tool_calls":
            
            stream = self.client.chat.completions.create(
                model="kimi-k2-0711-preview",
                messages=messages,
                temperature=0.6,
                max_tokens=max_tokens,
                stream=True,
                tools=tools
            )
            
            full_response = ""
            tool_calls = []
            current_message = {"role": "assistant", "content": ""}
            
            print(f"\nüí¨ Respuesta MedeX:")
            print("-" * 60)
            
            for chunk in stream:
                if chunk.choices:
                    choice = chunk.choices[0]
                    finish_reason = choice.finish_reason
                    
                    if choice.delta:
                        # Contenido normal
                        if choice.delta.content:
                            full_response += choice.delta.content
                            current_message["content"] += choice.delta.content
                            print(choice.delta.content, end="", flush=True)
                        
                        # Tool calls
                        if choice.delta.tool_calls:
                            for tool_call in choice.delta.tool_calls:
                                if len(tool_calls) <= tool_call.index:
                                    tool_calls.extend([None] * (tool_call.index + 1 - len(tool_calls)))
                                
                                if tool_calls[tool_call.index] is None:
                                    tool_calls[tool_call.index] = {
                                        "id": tool_call.id,
                                        "type": tool_call.type,
                                        "function": {"name": tool_call.function.name, "arguments": ""}
                                    }
                                
                                if tool_call.function.arguments:
                                    tool_calls[tool_call.index]["function"]["arguments"] += tool_call.function.arguments
            
            # Si hay tool calls, procesarlos
            if finish_reason == "tool_calls" and tool_calls:
                current_message["tool_calls"] = [tc for tc in tool_calls if tc is not None]
                messages.append(current_message)
                
                print(f"\nüîç Buscando informaci√≥n m√©dica actualizada...")
                
                for tool_call in current_message["tool_calls"]:
                    if tool_call["function"]["name"] == "$web_search":
                        # Para b√∫squeda web, solo retornar los argumentos
                        try:
                            arguments = json.loads(tool_call["function"]["arguments"])
                            messages.append({
                                "role": "tool",
                                "tool_call_id": tool_call["id"],
                                "name": "$web_search",
                                "content": json.dumps(arguments)
                            })
                        except:
                            messages.append({
                                "role": "tool",
                                "tool_call_id": tool_call["id"],
                                "name": "$web_search",
                                "content": json.dumps({"query": query})
                            })
            else:
                # Respuesta final
                print("\n" + "-" * 60)
                
                # Guardar en historial
                self.conversation_history.append({
                    "timestamp": datetime.now().isoformat(),
                    "user_query": query,
                    "response": full_response,
                    "user_type": user_type,
                    "is_emergency": is_emergency
                })
                
                return full_response
        
        return full_response
    
    async def _generate_direct(self, messages: List[Dict], tools: Optional[List], user_type: str = "Professional") -> str:
        """Genera respuesta directa sin streaming"""
        
        # Configurar max_tokens din√°mico seg√∫n el tipo de usuario
        if user_type == "Educational":
            # Modo Educacional necesita m√°s tokens para explicaciones universitarias extensas
            max_tokens = 4096  # Explicaciones educativas completas
        else:
            # Modo Profesional necesita M√ÅS tokens para an√°lisis cl√≠nicos detallados con tablas
            max_tokens = 5120  # Aumentado para an√°lisis profesionales completos con estructura tabular
        
        response = self.client.chat.completions.create(
            model="kimi-k2-0711-preview",
            messages=messages,
            temperature=0.6,
            max_tokens=max_tokens,
            tools=tools
        )
        
        return response.choices[0].message.content
    
    async def analyze_medical_image(self, image_path: str, clinical_context: str = "") -> str:
        """Analiza im√°genes m√©dicas"""
        
        try:
            # Verificar que el archivo existe
            if not Path(image_path).exists():
                return f"‚ùå Error: Archivo {image_path} no encontrado"
            
            # Leer imagen
            with open(image_path, 'rb') as f:
                image_data = f.read()
            
            # Codificar en base64
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            file_ext = Path(image_path).suffix.lower()
            
            # Detectar tipo de usuario del contexto
            user_type = self.detect_user_type(clinical_context) if clinical_context else "Educational"
            
            # Crear prompt espec√≠fico para an√°lisis de imagen con filtrado de modalidades m√©dicas v√°lidas
            if user_type == "Professional":
                system_prompt = f"""Eres MedeX v25.83, especialista en an√°lisis de im√°genes m√©dicas para profesionales m√©dicos.
FECHA Y HORA: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
TIPO DE USUARIO: PROFESSIONAL - AN√ÅLISIS DE IMAGEN M√âDICA
MODALIDADES V√ÅLIDAS √öNICAMENTE: RX, TAC, RM, US

PROTOCOLO DE FILTRADO OBLIGATORIO INICIAL:
1. PRIMERO: Identifica si la imagen corresponde EXCLUSIVAMENTE a alguna de estas modalidades m√©dicas:
   - RX (Radiograf√≠a/Rayos X)
   - TAC (Tomograf√≠a Axial Computarizada/CT)
   - RM (Resonancia Magn√©tica/MRI)
   - US (Ultrasonido/Ecograf√≠a)

2. SI LA IMAGEN NO CORRESPONDE A NINGUNA MODALIDAD V√ÅLIDA:
   RESPONDE √öNICAMENTE: "‚ùå No se puede analizar la imagen. Por favor, provee una RX, TAC, RM o US para el an√°lisis m√©dico."

3. SI LA IMAGEN CORRESPONDE A UNA MODALIDAD V√ÅLIDA:
   INICIA TU RESPUESTA CON: "[MODALIDAD] recibida" (ej: "RX recibida", "TAC recibida", "RM recibida", "US recibida")
"""
                
                user_prompt = f"""PROTOCOLO DE AN√ÅLISIS IMAGENOL√ìGICO PROFESIONAL:

**PASO 1 - FILTRADO OBLIGATORIO**: Determina si esta imagen corresponde EXCLUSIVAMENTE a alguna de las modalidades m√©dicas v√°lidas: RX, TAC, RM o US.

**PASO 2 - RESPUESTA SEG√öN VALIDACI√ìN**:
- Si NO es RX/TAC/RM/US: Responde √∫nicamente el mensaje de rechazo especificado
- Si S√ç es RX/TAC/RM/US: Inicia con "[MODALIDAD] recibida" y procede con a realiza un an√°lisis detallado de la imagen con enfoque cl√≠nico y educativo.
- Describe el caso de la imagen con rigor cientifico/m√©dico, incluyendo hallazgos relevantes, posibles diagn√≥sticos diferenciales y recomendaciones para estudios adicionales o manejo cl√≠nico.
"""
            
            else:
                system_prompt = f"""Eres MedeX v25.83, profesor universitario eminencia en medicina .
FECHA Y HORA: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
TIPO DE USUARIO: EDUCATIONAL - AN√ÅLISIS EDUCATIVO DE IMAGEN M√âDICA
MODALIDADES V√ÅLIDAS √öNICAMENTE: RX, TAC, RM, US

PROTOCOLO DE FILTRADO OBLIGATORIO INICIAL:
1. PRIMERO: Identifica si la imagen corresponde EXCLUSIVAMENTE a alguna de estas modalidades m√©dicas:
   - RX (Radiograf√≠a/Rayos X)
   - TAC (Tomograf√≠a Axial Computarizada/CT)
   - RM (Resonancia Magn√©tica/MRI)
   - US (Ultrasonido/Ecograf√≠a)

2. SI LA IMAGEN NO CORRESPONDE A NINGUNA MODALIDAD V√ÅLIDA:
   RESPONDE √öNICAMENTE: "‚ùå No se puede analizar la imagen. Por favor, provee una RX, TAC, RM o US para el an√°lisis m√©dico."

3. SI LA IMAGEN CORRESPONDE A UNA MODALIDAD V√ÅLIDA:
   INICIA TU RESPUESTA CON: "[MODALIDAD] recibida" (ej: "RX recibida", "TAC recibida", "RM recibida", "US recibida"), y continua con: 
    -Realiza un an√°lisis detallado de la imagen con enfoque cl√≠nico y educativo.
    -Describe el caso de la imagen con rigor cientifico/m√©dico, incluyendo hallazgos relevantes, posibles diagn√≥sticos diferenciales y recomendaciones para estudios adicionales o manejo cl√≠nico.


"""
                
                user_prompt = f"""PROTOCOLO DE AN√ÅLISIS IMAGENOL√ìGICO EDUCATIVO:

**PASO 1 - FILTRADO OBLIGATORIO**: Determina si esta imagen corresponde EXCLUSIVAMENTE a alguna de las modalidades m√©dicas v√°lidas: RX, TAC, RM o US.

**PASO 2 - RESPUESTA SEG√öN VALIDACI√ìN**:
- Si NO es RX/TAC/RM/US: Responde √∫nicamente el mensaje de rechazo especificado
- Si S√ç es RX/TAC/RM/US: Inicia con "[MODALIDAD] recibida" y procede con an√°lisis educativo detallado de la imagen.
- Explica los hallazgos de manera comprensible, incluyendo conceptos anat√≥micos, fisiopatolog√≠a relevante y contexto cl√≠nico educativo.
"""
            
            # Configurar mensajes
            messages = [
                {"role": "system", "content": system_prompt},
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image{file_ext};base64,{image_base64}"
                            }
                        },
                        {"type": "text", "text": user_prompt}
                    ]
                }
            ]
            
            # Configurar max_tokens din√°mico seg√∫n el tipo de usuario
            if user_type == "Educational":
                # Modo Educacional necesita m√°s tokens para explicaciones detalladas de im√°genes
                max_tokens = 3000  # Mayor l√≠mite para explicaciones educativas de im√°genes
            else:
                # Modo Profesional - an√°lisis t√©cnico conciso
                max_tokens = 1500
            
            # Generar an√°lisis
            response = self.client.chat.completions.create(
                model="moonshot-v1-128k-vision-preview",
                messages=messages,
                temperature=0.3,
                max_tokens=max_tokens
            )
            
            result = response.choices[0].message.content
            
            # Actualizar estad√≠sticas
            self.session_stats['images_analyzed'] += 1
            
            return result
            
        except Exception as e:
            return f"‚ùå Error analizando imagen: {e}"
    
    def get_session_stats(self) -> Dict[str, Any]:
        """Obtiene estad√≠sticas de la sesi√≥n"""
        return {
            **self.session_stats,
            "conversations": len(self.conversation_history),
            "model": "kimi-k2-0711-preview + RAG",
            "capabilities": [
                "Streaming real-time",
                "Emergency detection", 
                "Professional/Educational mode",
                "Medical image analysis",
                "Web search integration",
                "Conversational memory"
            ]
        }
    
    async def generate_response_stream(self, query: str):
        """Generador de respuestas con streaming para API web"""
        # Analizar query
        user_type = self.detect_user_type(query)
        is_emergency = self.detect_emergency(query)
        
        # Actualizar estad√≠sticas
        self.session_stats['queries'] += 1
        if is_emergency:
            self.session_stats['emergencies'] += 1
        if user_type == "Professional":
            self.session_stats['professional_queries'] += 1
        else:
            self.session_stats['educational_queries'] += 1
        
        # Crear system prompt
        system_prompt = self.create_system_prompt(user_type, is_emergency)
        
        # Configurar herramientas
        tools = None
        if not is_emergency:
            tools = [
                {
                    "type": "builtin_function",
                    "function": {
                        "name": "web_search"
                    }
                }
            ]
        
        # Agregar mensaje al historial
        self.conversation_history.append({
            "role": "user",
            "content": query
        })
        
        # Preparar mensajes
        messages = [
            {"role": "system", "content": system_prompt},
            *self.conversation_history[-10:]  # √öltimos 10 mensajes
        ]
        
        # Streaming
        try:
            response = self.client.chat.completions.create(
                model="kimi-k2-0711-preview",
                messages=messages,
                temperature=0.3,
                stream=True,
                tools=tools
            )
            
            full_response = ""
            for chunk in response:
                if chunk.choices and len(chunk.choices) > 0:
                    delta = chunk.choices[0].delta
                    if hasattr(delta, 'content') and delta.content:
                        full_response += delta.content
                        yield delta.content
            
            # Agregar respuesta al historial
            self.conversation_history.append({
                "role": "assistant",
                "content": full_response
            })
            
        except Exception as e:
            error_msg = f"‚ùå Error: {e}"
            yield error_msg
    
    def clear_history(self):
        """Limpia el historial conversacional"""
        self.conversation_history.clear()
        print("üßπ Historial limpiado")

# Interfaz de chat principal
class MedeXChat:
    """Interfaz de chat para MedeX v25.83"""
    
    def __init__(self):
        self.medex = MedeXv2583()
        self.session_start = datetime.now()
    
    def print_header(self):
        """Header del sistema"""
        print("\n" + "="*80)
        print("üè• MedeX v25.83 ‚Äî Sistema M√©dico de IA con RAG")
        print("üß† Kimi K2-0711-Preview ‚Ä¢ üìö RAG sobre base m√©dica curada")
        print("üë§ Detecci√≥n autom√°tica: Educational ‚Üî Professional")
        print("üö® Triage de emergencias ‚Ä¢ üåê Evidencia con citas")
        print("="*80)
        print("üí° COMANDOS")
        print("  üìä estado ‚Äî Ver estad√≠sticas")
        print("  üßπ limpiar ‚Äî Limpiar historial")
        print("  üö™ salir ‚Äî Terminar")
        print("="*80)
        print("‚ö†Ô∏è Uso profesional y educativo. No reemplaza valoraci√≥n m√©dica presencial.")
        print("="*80 + "\n")
    
    async def handle_special_commands(self, user_input: str) -> Optional[bool]:
        """Maneja comandos especiales"""
        parts = user_input.lower().strip().split()
        command = parts[0] if parts else ""
        
        if command in ['salir', 'exit', 'quit']:
            print("\nüëã Cerrando MedeX v25.83...")
            duration = datetime.now() - self.session_start
            print(f"‚è±Ô∏è  Duraci√≥n de sesi√≥n: {duration}")
            stats = self.medex.get_session_stats()
            print(f"üìä Consultas procesadas: {stats['queries']}")
            print("üôè ¬°Gracias por usar MedeX!")
            return False
        
        elif command == 'estado':
            stats = self.medex.get_session_stats()
            print(f"\nüìä ESTAD√çSTICAS DE SESI√ìN:")
            print(f"   üí¨ Consultas: {stats['queries']}")
            print(f"   üö® Emergencias: {stats['emergencies']}")
            print(f"   üë®‚Äç‚öïÔ∏è Profesionales: {stats['professional_queries']}")
            print(f"   üéì Educacionales: {stats['educational_queries']}")
            print(f"   üß† Modelo: {stats['model']}")
            return True
        
        elif command == 'limpiar':
            self.medex.clear_history()
            return True
        
        return None
    
    async def chat_loop(self):
        """Loop principal del chat"""
        
        self.print_header()
        print("üöÄ MedeX v25.83 iniciado correctamente")
        print("üí¨ Escribe tu consulta m√©dica...\n")
        
        try:
            while True:
                try:
                    user_input = input("ü©∫ Consulta: ").strip()
                    
                    if not user_input:
                        continue
                    
                    # Manejar comandos especiales
                    command_result = await self.handle_special_commands(user_input)
                    
                    if command_result is False:
                        break
                    elif command_result is True:
                        continue
                    
                    # Procesar consulta m√©dica
                    await self.medex.generate_response(user_input, use_streaming=True)
                    print("\n" + "‚îÄ" * 60 + "\n")
                
                except KeyboardInterrupt:
                    print("\n\n‚å®Ô∏è  Interrupci√≥n detectada...")
                    confirm = input("¬øSalir? (s/N): ").lower()
                    if confirm in ['s', 'si', 'y', 'yes']:
                        break
                    else:
                        continue
                
                except Exception as e:
                    print(f"\n‚ùå Error: {e}")
                    print("üí° Sistema operativo. Intenta nueva consulta.")
        
        finally:
            print("\nüè• Sesi√≥n MedeX v25.83 terminada")

# Funci√≥n principal
async def main():
    """Funci√≥n principal"""
    
    print("üè• Iniciando MedeX v25.83...")
    
    try:
        chat = MedeXChat()
        await chat.chat_loop()
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")

if __name__ == "__main__":
    asyncio.run(main())